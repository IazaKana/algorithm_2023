1.print()
    1-1.sep
        print('S','E','P', sep='@')
        출력 >>>>> S@E@P
        S , E , P라는 문자열 사이에 @가 끼워넣어져 출력된다. 즉 구분자는 @가 된다
    1-2.end
        print("I like", end=" ")
        print("money")
        end옵션을 사용하면 그 뒤의 출력값과 이어서 출력한다. (즉 줄바꿈을 하지 않게 된다.)
    1-3.escape
        \n  : 줄바꿈
        \t :   탭(TAP)
        \\  :  '\' 출력
        \'  :  작은따옴표 출력
        \"  :  큰따옴표 출력
        \b  :  백스페이스

2.파이썬에서 문자열은 불변 객체

3.join함수
    매개변수로 들어온 리스트에 있는 요소 하나하나를 합쳐서 하나의 문자열로 바꾸어 변환하는 함수
    "".join(리스트)     '구분자'.join(리스트)

4.upper() - 문자열을 대문자로 변환
  lower() - 문자열을 소문자로 변환
  capitalize() - 맨 첫글자만 대문자로 변환하기
  title() - 문자열의 각 단어의 첫글자를 대문자로 변환
  swapcase - 문자열에 있는 모든 문자의 대/소문자를 반대로 변환

5.리스트의 insert()함수 - 원하는 위치에 값을 넣을 수 있다. (ex)list.insert(2, 3) -> 리스트의 2의 위치에 3이라는 값을 넣는다
  리스트의 index함수 - 특정값이 어느 위치에 있는지 확인하는 함수, list.index(값), 여러 개 있더라도 처음 찾은 값의 위치만 반환
  리스트의 count함수 - 특정값의 개수를 세기 위해서 사용, list.count(값)
  리스트의 set함수 - 리스트 중복 제거하기, set(list)
  리스트 요소 한줄에 한번에 출력 - print(*list)

6.ord(문자) - 하나의 문자를 인자로 받고 해당 문자에 해당하는 유니코드 정수를 반환
  chr(정수) - 하나의 정수를 인자로 받고 해당 정수에 해당하는 유니코드 문자를 반환

7.절댓값 - abs(값)

8.set() - 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형
  s1 = set([1,2,3])
  8-1.중복을 허용하지 않는다, 순서가 없다
  8-2.집합
    8-2-1.교집합
    (ex)s3 = s1 & s2
    s3 = s1.intersection(s2)
    8-2-2.합집합
    (ex)
    s3 = s1 | s2
    s3 = s1.union(s2)
    8-2-3.차집합
    s3 = s1 - s2
    s3 = s1.difference(s2)
  8-3.
   8-3-1.값 1개 추가히기(add)
   (ex)s1.add(4)
   8-3-2.값 여러개 추가하기(update)
   (ex)s1.update([4,5,6])
   8-3-3.특정 값 제거하기(remove)
   (ex)s1.remove(2)

   set의 탐색, 삽입, 삭제의 시간복잡도는 O(1)

9.sys.stdin.readline().strip() -> 개행 없애기

10.haspmap(dictionary)
  10.1 탐색(if key in map:, if value in map.values()) 삭제(d.pop(key)), 삽입(map[key] = value) => 시간복잡고 O(1)
  10.2 

11.defaultdict()
  value를 지정하지 않은 key의 value를 0으로 가진다. 따라서 특정 키 존재여부는 0이 맞는지 아닌지로 알 수 있다.

12.deque()
  deque확장 -> extend(), extendleft()
