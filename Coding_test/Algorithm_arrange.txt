1.print()
    1-1.sep
        print('S','E','P', sep='@')
        출력 >>>>> S@E@P
        S , E , P라는 문자열 사이에 @가 끼워넣어져 출력된다. 즉 구분자는 @가 된다
    1-2.end
        print("I like", end=" ")
        print("money")
        end옵션을 사용하면 그 뒤의 출력값과 이어서 출력한다. (즉 줄바꿈을 하지 않게 된다.)
    1-3.escape
        \n  : 줄바꿈
        \t :   탭(TAP)
        \\  :  '\' 출력
        \'  :  작은따옴표 출력
        \"  :  큰따옴표 출력
        \b  :  백스페이스

2.파이썬에서 문자열은 불변 객체

3.join함수
    매개변수로 들어온 리스트에 있는 요소 하나하나를 합쳐서 하나의 문자열로 바꾸어 변환하는 함수
    "".join(리스트)     '구분자'.join(리스트)

4.upper() - 문자열을 대문자로 변환
  lower() - 문자열을 소문자로 변환
  capitalize() - 맨 첫글자만 대문자로 변환하기
  title() - 문자열의 각 단어의 첫글자를 대문자로 변환
  swapcase() - 문자열에 있는 모든 문자의 대/소문자를 반대로 변환

5.리스트의 insert()함수 - 원하는 위치에 값을 넣을 수 있다. (ex)list.insert(2, 3) -> 리스트의 2의 위치에 3이라는 값을 넣는다
  리스트의 index함수 - 특정값이 어느 위치에 있는지 확인하는 함수, list.index(값), 여러 개 있더라도 처음 찾은 값의 위치만 반환
  리스트의 count함수 - 특정값의 개수를 세기 위해서 사용, list.count(값)
  리스트의 set함수 - 리스트 중복 제거하기, set(list)
  리스트 요소 한줄에 한번에 출력 - print(*list)

6.ord(문자) - 하나의 문자를 인자로 받고 해당 문자에 해당하는 유니코드 정수를 반환
  chr(정수) - 하나의 정수를 인자로 받고 해당 정수에 해당하는 유니코드 문자를 반환

7.절댓값 - abs(값)

8.set() - 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형
  s1 = set([1,2,3])
  8-1.중복을 허용하지 않는다, 순서가 없다
  8-2.집합
    8-2-1.교집합
    (ex)s3 = s1 & s2
    s3 = s1.intersection(s2)
    8-2-2.합집합
    (ex)
    s3 = s1 | s2
    s3 = s1.union(s2)
    8-2-3.차집합
    s3 = s1 - s2
    s3 = s1.difference(s2)
  8-3.
   8-3-1.값 1개 추가히기(add)
   (ex)s1.add(4)
   8-3-2.값 여러개 추가하기(update)
   (ex)s1.update([4,5,6])
   8-3-3.특정 값 제거하기(remove)
   (ex)s1.remove(2)

   set의 탐색, 삽입, 삭제의 시간복잡도는 O(1)

9.sys.stdin.readline().strip() -> 개행 없애기

10.haspmap(dictionary)
  10.1 탐색(if key in map:, if value in map.values()) 삭제(d.pop(key)), 삽입(map[key] = value) => 시간복잡도 O(1)
  10.2 

11.defaultdict()
  value를 지정하지 않은 key의 value를 0으로 가진다. 따라서 특정 키 존재여부는 0이 맞는지 아닌지로 알 수 있다.

12.deque()
  deque확장 -> extend(), extendleft()
  rotate()함수 -> 양수면 오른쪽이동, 음수면 왼쪽이동

13.enumerate() - 인덱스와 원소로 이루어진 튜플을 만들어준다.
  (ex)for i in enmerate(['A', 'B', 'C'])
  시작인덱스 변경 - 마지막에 start=1형식으로 추가

14.items() - 키:값 쌍 뽑아내기
  딕셔너리로 정렬할 때

15.list(map(int, n)) -> 문자열 각 자리수 인트로 변환 후 리스트 반환

16.index() -> O(n)

17.딕셔너리 for문 선언

--> 18.Counter()함수 정리

19.우선순위 큐
  데이터 추가는 어떤 순서로 해도 상관이 없지만 제거될 때는 가장 작은 값을 제거하는 독특한 특정을 지닌 자료구조
  from queue import PriorityQueue
  que = PriorityQueue()
  우선순위 큐의 디폴트 사이즈는 무한대입니다. 만약에 특정 최대 크기를 가진 우선순위 큐가 필요하다면 maxsize를 넘기면 됨.
  que = PriorityQueue(maxsize=9)
  put()메서드 - 원소를 추가(log n)
  get()메서드 - 원소를 삭제(log n)
  단순 오름차순이 아닌 다른 기준으로 원소가 정렬되기를 원한다면 (우선순위, 값)의 튜플의 형태로 데이터를 추가하고 제거하면 됨.
  que.put((3, 'Apple'))
  que.put((1, 'Banana'))
  que.put((2, 'Cherry'))

  20.소수 -> 목표값의 제곱근값까지 에라토스테네스의 체로 연산(import math, math.sqrt(16))

  21.str[::-1] -> 문자열 앞 뒤 바꾸기

  22.최대공약수 -> 유클리드 호제법
     최소공배수 -> (A*B) / 최대공약수

  23.[[]*2]*3 -> [[]*2 for _ in range(3)] 얕은 복사 주의

24.진수 변환
  24-1. 10진수 -> 2, 8, 16진수 변환
  bin(), oct(), hex()
  진법 표시를 지우려면 (ex)bin(10)[2:]
  24-2. n진수 -> n진수
  format(valub, '#b'):10진수 -> 2진수 변환하기
  (ex)a = oct(314), print(int(a, 8)) -> 10진수 변환

25.소수점
  round(반올림하고자 하는 값, 자리수)
  '이것을 문자열 {:.2f}'.format(실수입력)

26.순열과 조합
itertools.permutations(arr, 2) - arr안에 있는 서로 다른 n개 중 2개를 골라 순서를 정해 나열
itertools.combinations(arr, 2) - 서로 다른 n개 중에서 2개를 취하여 조를 만들때
from itertools import combinations
list(map(''.join.permutations(arr,2)))

zip() - 동일한 개수로 이루어진 iterable한 객체들을 인수로 받아서 묶어서 iterator로 반환
all() - iterable한 객체를 인수로 받아서 원소가 모두 참이면 True 아니면 False를 반환
any() - iterable한 객체를 인수로 받아서 원소가 하나라도 참이면 True 아니면 False를 반환
chain() - iterable한 객체들을 인수로 받아 하나의 iterator로 반환

27.LIS알고리즘

28.소수 구하기 - 에라토스테네스의 체의 원리
N의 제곱근까지만 탐색
1.구하고자 하는 소수의 범위만큼 1차원 리스트 생성
2.2부터 시작하고 현재 숫자가 지워진 상태가 아닌 경우 현재 선택된 숫자의 배수에 해당하는 수를
  리스트에서 끝까지 탐색하면서 지운다. 이때 처음으로 선택된 숫자는 지우지 않는다.
3.리스트의 끝까지 2를 반복한 후 리스트에서 남아 있는 모든 수를 출력한다.

29.list.count(카운트할 값)

30.값 서로 바꾸기 한번에 -> A[i], A[j] = A[j], A[i]

31.A = Apple
A.lstrip('ap') => 'le' => 왼쪽으로 a, p의 문자열의 모든 조합 제거
A.rstrip()
A.strip('ae') => 양쪽 문자열에 공이나 인자가된 문자열의 모든 조합 제거 => 'ppl'
set자료형에만 교집합, 합집합 존재

32.

#inflearn_codingtest_python
  2.deque - 시간복잡도 O(1)
    from collections import deque
    append() - 오른쪽 부분에 자료 추가, appendleft()
    pop() - 오른쪽 자료 제거, popleft()

  3.dictionary - key, value를 한 쌍으로 하는 값을 저장하는 자료 구조
    sH = {'a': 3, 'b': 5, 'c': 2}
    딕셔너리 key 탐색 - for key in sH: -> a, b, C
    딕셔너리 value 탐색 - for val in sH.values(): -> 3, 5, 2
    딕셔너리 key, value 동시 탐색 - for key, val in sH.items():
    key in sH - 딕셔너리에 key가 있는지 확인해서 있으면 true, 없으면 false
    del(sH[key]) - 딕셔너리의 key를 삭제
    len(sH) - 딕셔너리의 키의 개수
    특정값 찾기 - d['a']
    추가하기 - d['d'] = 4
    딕셔너리 키값들만 추출 - d.keys()
    값만 추출 - d.values()
    특정 키값 삭제 - del d['d']
    모두 삭제 - d.clear()

    from collections import Counter
    리스트나 셋을 인자로 넘기면 각 항목을 키로 해서 개수를 알려준다.
      상위요소 반환 - most_common(), key value값 출력
      교집합 &, 합집합 |
      카운터 숫자만큼 요소 반환 - list(sh.elements())
    dict = defaultdict(int)

  4.시뮬레이션

  5.sort함수
    nums.sort()
    nums.sort(reverse = True)
    nums.sort(key = lambda v : (v[0])) -> [x, y]에서 x값에 의한 오름차순 정렬
    nums.sort(key = lambda v : (v[1])) -> [x, y]에서 y값에 의한 오름차순 정렬
    nums.sort(key = lambda v : (-v[0])) -> [x, y]에서 x값에 의한 내림차순
    nums.sort(key = lambda v : (v[1], v[0])) -> [x, y]에서 y값에 의한 오름차순을 하되 y값이 같은 경우는 x값에 따라 오름차순

    sorted(nums)
    sorted(nums, reverse=True)
  
  6.그리디

  7.이진 탐색
    추가 정리

  8.스택, 큐
    stack
      pop() - 스택에서 가장 위에 있는 항목을 제거
      stack[-1] - 가장 위에 있는 항목 확인
    queue - fifo형식의 자료 구조

  9.DFS

  10.BFS

  11.그래프

#Do_it codingtest 정리
3.배열과 리스트
  3-2.구간 합 = 구간 합을 나타내는 리스트 미리 생성
  3-3.투 포인터
  3-4.슬라이딩 윈도우
  3-5.큐 - S[0] => 맨 앞에 있는 값 단순확인
  3-6.우선순위 큐 = from queue import PriorityQueue

4.정렬

5.탐색
  5-1.깊이 우선 탐색
  5-2.너비 우선 탐색
  5-3.이진 탐색

6.그리디

7.정수론
  7-1.소수 구하기 - 에라토스테네스의 체 원리
  7-3.유클리스 호제법
    최대공약수 - mod연산
    최소공배수 - a * b / 최대공약수

#유형 정리
1.소수 구하기 = > 에라토스테네스의 원리 사용
def is_prime_number(x):
    if x < 2:
        return False
    
    for i in range(2, x):
        if x % i == 0:
            return False
    
    return True

prime = []
for i in range(2, 1000) :
    for j in range(2, i // 2 + 1) :
        if i % j == 0 :
            break
    else :
        prime.append(i)
2.순열문제 - n개를 선택해서 연산한 수를 ~  => combinations사용
3.palindrome문제
4.소수점 문제
  round(값, 자리수)
  "{:.nf}".format(실수입력)
5.문자열반복문제
6.이진 탐색(start, end)

재귀, 완전탐색, 백트래킹 위주
그래프 문제 많이 나옴?
코딩테스트 연습 -> 코딩테스트 고득점 kit

#프로그래머스
in 연산자를 쓸 때 리스트안에 있는 것보다 dict안에 있는 것을 찾을 때가
효율성이 더 좋음

